[ { "title": "字符串大数相加", "url": "/posts/string-big-number-add/", "categories": "技术, 算法", "tags": "面试, 算法", "date": "2022-08-06 12:17:00 +0800", "snippet": "题目 实现两个超大字符串整数加法，字符串整数会超过 long 存储上限，不允许使用相关系统库函数直接完成。注意：整数包含正负数。思路两个数都有可能是正负数，所以 a+b 有4种情况， a，b 都是正数, 则 a+b = |a|+|b| a，b 都是负数, 则 a+b = (-|a|)+(-|b|) = -(|a|+|b|) a 是正数，b 是负数，则 a+b = |a|+(-|b|) = |a|-|b| a 是负数，b 是正数，则 a+b = (-|a|)+|b| = -(|a|-|b|)综上，只要实现 |a|+|b| 和 |a|-|b| 即可实现所有情况。|a|+|b| 实现很简单，只要模拟加法过程即可。|a|-|b| 实现需要注意下结果的正负，绝对值大的减去绝对值小的，结果为正数；绝对值小的减去绝对值大的，结果为负数。代码package mainimport \"fmt\"func main() {\tfmt.Println(StringAdd(\"456\", \"-789\"))}func StringAdd(a, b string) string {\t// 确认正负数并且将字符串转成数组\tvar asign, bsign int = 1, 1\tanum, bnum := reverse([]rune(a)), reverse([]rune(b)) // 倒序下，个位数放到前面\tif a[0] == '-' {\t\tasign = -1\t\tanum = anum[:len(anum)-1] // 去掉负号\t}\tif b[0] == '-' {\t\tbsign = -1\t\tbnum = bnum[:len(bnum)-1]\t}\t// 数字补齐\tif len(anum) &gt; len(bnum) {\t\tbnum = arrRightPad(bnum, len(anum)-len(bnum), '0')\t} else if len(anum) &lt; len(bnum) {\t\tanum = arrRightPad(anum, len(bnum)-len(anum), '0')\t}\t// 加减处理，同号相加符号对齐，异号相减符号随大\tvar cSign int = 1\tvar cnum []rune\tif asign == bsign {\t\tcnum = add(anum, bnum)\t\tcSign = asign\t} else if compare(anum, bnum) &gt;= 0 {\t\tcnum = minus(anum, bnum)\t\tcSign = asign\t} else {\t\tcnum = minus(bnum, anum)\t\tcSign = bsign\t}\t// 逆序并去除前置0\tcnum = reverse(cnum)\ti := 0\tfor i &lt; len(cnum) &amp;&amp; cnum[i] == '0' {\t\ti++\t}\tcnum = cnum[i:]\t// 输出结果\tif cSign == -1 {\t\treturn \"-\" + string(cnum)\t}\treturn string(cnum)}func add(anum, bnum []rune) []rune {\tvar carry rune\tvar cnum []rune\tfor i := 0; i &lt; len(anum); i++ {\t\tval := anum[i] - '0' + bnum[i] - '0' + carry\t\tcnum = append(cnum, val%10+'0')\t\tcarry = val / 10\t}\tif carry &gt; 0 {\t\tcnum = append(cnum, '1')\t}\treturn cnum}func minus(anum, bnum []rune) []rune {\tvar carry rune\tvar cnum []rune\tfor i := 0; i &lt; len(anum); i++ {\t\tval := (anum[i] - '0') - (bnum[i] - '0') + carry\t\tif val &lt; 0 {\t\t\tcnum = append(cnum, val+10+'0')\t\t\tcarry = -1\t\t} else {\t\t\tcnum = append(cnum, val+'0')\t\t\tcarry = 0\t\t}\t}\treturn cnum}func compare(anum, bnum []rune) int {\tfor i := len(anum) - 1; i &gt;= 0; i-- {\t\tif anum[i] &gt; bnum[i] {\t\t\treturn 1\t\t} else if anum[i] &lt; bnum[i] {\t\t\treturn -1\t\t}\t}\treturn 0}func arrRightPad(arr []rune, cnt int, val rune) []rune {\tfor i := 0; i &lt; cnt; i++ {\t\tarr = append(arr, '0')\t}\treturn arr}func reverse(arr []rune) []rune {\tfor i, cnt := 0, len(arr); i &lt; cnt/2; i++ {\t\tarr[i], arr[cnt-i-1] = arr[cnt-i-1], arr[i]\t}\treturn arr}" }, { "title": "Golang 避坑指南之 time.After", "url": "/posts/golang-bad-case-of-time-after/", "categories": "技术, Golang", "tags": "踩坑, Golang", "date": "2022-08-06 11:53:00 +0800", "snippet": "如何简单实现请求调用的超时机制呢？有了 time.After 当然就很简单啦，代码如下：func AsyncCallWithTimeout1() {\tctx, cancel := context.WithCancel(context.Background())\tgo func(ctx context.Context) {\t\tdefer cancel()\t\t// 模拟请求调用\t\ttime.Sleep(200 * time.Millisecond)\t}(ctx)\tselect {\tcase &lt;-ctx.Done():\t\tfmt.Println(\"call successfully!!!\")\t\treturn\tcase &lt;-time.After(time.Duration(3 * time.Second)):\t\tfmt.Println(\"timeout!!!\")\t\treturn\t}}测试该方法，输出如下：hello % go run ./hello.go call successfully!!!和我们期待的一样，成功了，没有超时。让我们再测试下超时场景，修改模拟请求调用的超时时间为 4 秒，然后再测试该方法，输出如下：hello % go run ./hello.gotimeout!!!果然发生了超时，这就是我们想要的功能，如此简单。不过优秀的程序猿都会仔细阅读 API 文档，让我们一起来看下：// After waits for the duration to elapse and then sends the current time// on the returned channel.// It is equivalent to NewTimer(d).C.// The underlying Timer is not recovered by the garbage collector// until the timer fires. If efficiency is a concern, use NewTimer// instead and call Timer.Stop if the timer is no longer needed.func After(d Duration) &lt;-chan Time {\treturn NewTimer(d).C}凭借多年 google 翻译 使用经验，这里大概意思是： Timer 不会被 GC 回收直到它被触发，如果需要考虑效率的话，Timer 不再被需要时，需要主动调用 Timer.Stop。卧槽，还好这次没有草率。如果有大量请求调用的场景，使用 time.After 会导致有大量的 Timer 对象被延迟释放，造成大量内存浪费。 原来正确的使用姿势应该是这个样子的：func AsyncCallWithTimeout2() {\tctx, cancel := context.WithCancel(context.Background())\tgo func() {\t\tdefer cancel()\t\t// 模拟请求调用\t\ttime.Sleep(200 * time.Millisecond)\t}()\ttimer := time.NewTimer(3 * time.Second)\tdefer timer.Stop()\tselect {\tcase &lt;-ctx.Done():\t\t// fmt.Println(\"call successfully!!!\")\t\treturn\tcase &lt;-timer.C:\t\t// fmt.Println(\"timeout!!!\")\t\treturn\t}}本着优秀程序猿是不会有 bug 的精神，让我们来验证下这个姿势还有没有问题。简单的测试代码如下：func main() {\tvar wg sync.WaitGroup\tfor i := 0; i &lt; 1000000; i++ {\t\twg.Add(1)\t\tgo func() {\t\t\tAsyncCallWithTimeout1()\t\t\t// AsyncCallWithTimeout2()\t\t\twg.Done()\t\t}()\t}\twg.Wait()\tfmt.Println(\"all done!!!\")\tfor i := 0; i &lt; 6; i++ {\t\truntime.GC()\t\ttime.Sleep(1 * time.Second)\t}}运行程序，测试关键输出如下:hello % GODEBUG=gctrace=1 go run ./hello.go# command-line-argumentsgc 1 @0.001s 12%: 0.006+2.2+0.017 ms clock, 0.075+1.5/4.1/0.75+0.21 ms cpu, 5-&gt;6-&gt;6 MB, 6 MB goal, 12 Pgc 2 @0.013s 5%: 0.004+2.2+0.017 ms clock, 0.053+0.85/4.1/2.8+0.21 ms cpu, 11-&gt;11-&gt;10 MB, 12 MB goal, 12 Pgc 3 @0.043s 3%: 0.004+3.6+0.005 ms clock, 0.058+0.15/9.7/9.7+0.065 ms cpu, 20-&gt;20-&gt;18 MB, 21 MB goal, 12 Pgc 1 @0.010s 6%: 0.10+23+0.33 ms clock, 1.2+14/5.9/0+3.9 ms cpu, 4-&gt;7-&gt;6 MB, 5 MB goal, 12 Pgc 2 @0.041s 15%: 0.14+7.0+0.14 ms clock, 1.6+42/20/0+1.7 ms cpu, 10-&gt;11-&gt;10 MB, 12 MB goal, 12 Pgc 3 @0.059s 20%: 0.28+23+0.20 ms clock, 3.4+77/28/0+2.5 ms cpu, 17-&gt;19-&gt;17 MB, 21 MB goal, 12 Pgc 4 @0.108s 22%: 0.053+32+0.23 ms clock, 0.64+121/49/0+2.8 ms cpu, 29-&gt;32-&gt;30 MB, 35 MB goal, 12 Pgc 5 @0.183s 25%: 0.076+27+0.20 ms clock, 0.91+196/77/0+2.4 ms cpu, 49-&gt;52-&gt;50 MB, 60 MB goal, 12 Pgc 6 @0.293s 28%: 0.11+47+0.093 ms clock, 1.3+376/140/0.086+1.1 ms cpu, 85-&gt;86-&gt;79 MB, 100 MB goal, 12 Pgc 7 @0.463s 30%: 0.071+72+0.13 ms clock, 0.85+584/214/0+1.6 ms cpu, 142-&gt;144-&gt;128 MB, 158 MB goal, 12 Pgc 8 @0.745s 29%: 0.36+122+1.2 ms clock, 4.3+767/337/0+14 ms cpu, 237-&gt;237-&gt;202 MB, 256 MB goal, 12 Pgc 9 @1.194s 29%: 0.13+189+0.99 ms clock, 1.6+1234/513/0+11 ms cpu, 388-&gt;391-&gt;312 MB, 405 MB goal, 12 Pall done!!!gc 10 @2.050s 20%: 30+138+0.006 ms clock, 362+0/366/1011+0.081 ms cpu, 565-&gt;565-&gt;364 MB, 624 MB goal, 12 P (forced)gc 11 @3.271s 14%: 0.082+104+0.041 ms clock, 0.98+0/295/853+0.49 ms cpu, 364-&gt;364-&gt;353 MB, 729 MB goal, 12 P (forced)gc 12 @4.411s 11%: 0.024+78+0.29 ms clock, 0.29+0/206/499+3.5 ms cpu, 353-&gt;353-&gt;250 MB, 706 MB goal, 12 P (forced)gc 13 @5.534s 9%: 0.035+31+0.006 ms clock, 0.42+0/61/308+0.082 ms cpu, 250-&gt;250-&gt;166 MB, 500 MB goal, 12 P (forced)gc 14 @6.596s 7%: 0.026+30+0.005 ms clock, 0.31+0/58/292+0.062 ms cpu, 166-&gt;166-&gt;166 MB, 332 MB goal, 12 P (forced)gc 15 @7.641s 6%: 0.027+31+0.006 ms clock, 0.33+0/79/283+0.076 ms cpu, 166-&gt;166-&gt;166 MB, 332 MB goal, 12 P (forced)切换到 AsyncCallWithTimeout2 ，运行程序，测试关键输出如下：hello % GODEBUG=gctrace=1 go run ./hello.go# command-line-argumentsgc 1 @0.002s 8%: 0.007+2.2+0.021 ms clock, 0.091+0.19/4.9/0.39+0.25 ms cpu, 4-&gt;7-&gt;6 MB, 5 MB goal, 12 Pgc 2 @0.014s 5%: 0.005+2.9+0.019 ms clock, 0.065+0/5.8/0.39+0.23 ms cpu, 10-&gt;11-&gt;10 MB, 12 MB goal, 12 Pgc 3 @0.040s 4%: 0.003+3.8+0.020 ms clock, 0.044+0.19/10/6.5+0.24 ms cpu, 18-&gt;19-&gt;17 MB, 20 MB goal, 12 Pgc 4 @0.082s 3%: 0.004+6.3+0.019 ms clock, 0.048+0/17/4.3+0.23 ms cpu, 31-&gt;33-&gt;28 MB, 34 MB goal, 12 Pgc 1 @0.008s 2%: 0.054+141+0.72 ms clock, 0.64+31/5.5/0+8.7 ms cpu, 4-&gt;25-&gt;24 MB, 5 MB goal, 12 Pgc 2 @0.179s 13%: 0.17+28+0.10 ms clock, 2.0+214/82/0+1.2 ms cpu, 38-&gt;41-&gt;37 MB, 48 MB goal, 12 Pgc 3 @0.263s 18%: 0.19+66+0.15 ms clock, 2.3+286/111/0+1.9 ms cpu, 62-&gt;68-&gt;64 MB, 75 MB goal, 12 Pgc 4 @0.412s 24%: 0.080+57+0.10 ms clock, 0.96+441/167/0+1.2 ms cpu, 109-&gt;110-&gt;100 MB, 128 MB goal, 12 Pgc 5 @0.603s 27%: 0.16+92+0.29 ms clock, 1.9+713/261/0+3.5 ms cpu, 180-&gt;184-&gt;154 MB, 200 MB goal, 12 Pgc 6 @0.957s 27%: 1.0+127+1.9 ms clock, 12+799/359/0+23 ms cpu, 291-&gt;292-&gt;203 MB, 308 MB goal, 12 Pgc 7 @1.417s 27%: 0.59+189+2.2 ms clock, 7.0+1176/511/0+26 ms cpu, 386-&gt;389-&gt;255 MB, 407 MB goal, 12 Pall done!!!gc 8 @2.171s 20%: 29+92+0.005 ms clock, 351+0/146/314+0.070 ms cpu, 408-&gt;408-&gt;158 MB, 510 MB goal, 12 P (forced)gc 9 @3.344s 14%: 0.025+34+0.006 ms clock, 0.30+0/69/297+0.078 ms cpu, 158-&gt;158-&gt;158 MB, 317 MB goal, 12 P (forced)gc 10 @4.394s 11%: 0.025+29+0.005 ms clock, 0.30+0/59/288+0.061 ms cpu, 158-&gt;158-&gt;158 MB, 317 MB goal, 12 P (forced)gc 11 @5.438s 9%: 0.024+32+0.004 ms clock, 0.29+0/72/285+0.058 ms cpu, 158-&gt;158-&gt;158 MB, 317 MB goal, 12 P (forced)gc 12 @6.486s 7%: 0.024+33+0.008 ms clock, 0.29+0/67/310+0.10 ms cpu, 158-&gt;158-&gt;158 MB, 317 MB goal, 12 P (forced)gc 13 @7.535s 6%: 0.020+30+0.007 ms clock, 0.24+0/60/293+0.089 ms cpu, 158-&gt;158-&gt;158 MB, 317 MB goal, 12 P (forced)对比两个的 GC 日志，可以发现 AsyncCallWithTimeout2 比 AsyncCallWithTimeout1 的内存回收会及时很多，这也符合 time.After 文档给的解释。所以结论是： time.After 创建的 Timer 对象需要等到 Timer 被触发时才能被 GC 回收释放，使用不当会造成内存浪费开发环境： go 1.14" }, { "title": "如何设计一个高并发系统", "url": "/posts/how-to-design-high-concurrency-web/", "categories": "技术, 架构", "tags": "面试, 高并发", "date": "2022-08-06 11:34:00 +0800", "snippet": "什么是高并发高并发（High Concurrency）是指通过设计保证系统能够同时并行处理很多请求。常用指标有： QPS，每秒响应请求数 TPS，每秒响应事务数 RT，响应时间，系统对请求做出响应的时间 Concurrency，并发数，系统同时能处理的请求数量 吞吐量：单位时间内处理的请求数量提高并发的思路 降低 RT 提高 Concurrency如何降低 RT 升级服务器和数据库硬件配置，最简单粗暴且有效的手段，但是硬件能带来的提升是有上限的 服务端引入缓存，缓存分为本地缓存和分布式缓存，可显著降低查询接口的响应时间 购买 CDN 服务，将图片、html、css、js等静态资源上传到 CDN，可显著降低用户打开页面的响应时间 业务优化，比如流程拆分，将实时性要求低的流程写入消息队列进行异步处理，将互相独立的流程并行处理；数据预加载；避免热点数据；索引优化；JVM 优化等如何提高 Concurrency 使用反向代理 Nginx，可以大大的提高服务的并发数，一般可以达到 10w 并发数，此时单机数据库会出现瓶颈 数据库读写分离，数据库使用主从模式，对一致性要求低的查询请求可以走从库，分担主库压力 数据库分库分表，把不同业务的数据放到不同的数据库中，如果单表数据量过大，可以进行分表存储。分库分表可以显著提升数据库查询的效率 使用负载均技术 LVS/F5，此时 Nginx 已经成为瓶颈，多加一层 Nginx 会影响 RT，所以一般会使用更高效的负载均衡软件 LVS 或者硬件 F5，此时并发数可以上升到几十万 使用 DNS 负载均衡，可以在域名下面绑定多个虚拟IP，每个虚拟 IP 指向一个机房，此时并发数已经来到百万、千万甚至亿的级别，服务入口的并发数将不在是瓶颈。架构图世上没有万能的架构，需要根据实际情况进行权衡。" }, { "title": "Golang Slice 总结", "url": "/posts/golang-slice/", "categories": "技术, Golang", "tags": "面试, Golang", "date": "2022-08-04 15:19:00 +0800", "snippet": "什么是 Slice 切片是对数组的抽象，提供动态数组的能力。切片的长度是不固定的，随着元素的增加而动态变化。数组与 Slice 的区别数组 值类型 长度固定 编译期间检查下标访问越界行为 可以作为 map 的 keySlice 引用类型 长度可变 运行期间检查下标访问越界行为 不可以作为 map 的 key适用场景 长度不固定 参数传递用法示例var nums []int // 声明切片var arr = [3]int{4, 5, 6} // 初始化数组nums = append(nums, 1, 2, 3) // 切片追加元素l := len(nums) // 获取元素个数c := cap(nums) // 获取切片容量bigger := make([]int, 6) // 创建指定长度和容量的切片copy(bigger, nums[:]) // 将 nums 中所有元素拷贝到 bigger 切片中copy(bigger[3:], arr[:]) // 将 arr 数组转变成切片并拷贝到 bigger 切片从下标 3 开始的地方fmt.Println(bigger) // 打印出 [1 2 3 4 5 6]避坑指南【Bad Case】append 数据丢失func main() {\tslice := make([]int, 0)\tslice = append(slice, 1, 2, 3)\tfmt.Println(slice) // 输出: [1 2 3]\tupdateSlice(slice, 1, -2)\tfmt.Println(slice) // 输出: [1 -2 3]\tappendSlice(slice, 2)\tfmt.Println(slice) // 输出: [1 -2 3]}func updateSlice(slice []int, idx int, val int) {\tslice[idx] = val\tfmt.Println(slice) // 输出: [1 -2 3]}func appendSlice(slice []int, val int) {\tslice = append(slice, val) // 扩容\tfmt.Println(slice) // 输出: [1 -2 3 2]}并发 append 数据丢失func main() {\tslice := make([]int, 0)\tvar wg sync.WaitGroup\tvar appendSlice = func(val int) {\t\tslice = append(slice, val)\t\twg.Done()\t}\tfor i := 0; i &lt; 10; i++ {\t\twg.Add(1)\t\tgo appendSlice(i)\t}\twg.Wait()\tfmt.Printf(\"len = %d, cap = %d\", len(slice), cap(slice)) // len &lt;= 10, cap &lt;= 16}数据结构type slice struct {\tarray unsafe.Pointer // 指针指向 heap 区一块连续内存地址\tlen int // 长度，实际元素个数\tcap int // 容量，最多元素个数}扩容机制当 Slice 容量不足以 append 新的元素时，会触发扩容。扩容时会申请一块新的内存空间，然后将旧 Slice 数据拷贝到新 Slice，并 append 新元素。为避免频繁扩容，扩容规则如下： 当新容量大于 2 倍旧容量时，按实际容量扩容 否则当旧容量小于 1024 时，按 2 倍容量扩容 否则按旧容量的 1.25 倍容量扩容另外，为考虑内存对齐，避免内存浪费，最终的容量可能会基于上面规则计算的值进行微调，具体细节可以阅读源码 " }, { "title": "图解 Golang Channel 原理", "url": "/posts/golang-channel/", "categories": "技术, Golang", "tags": "面试, Golang", "date": "2022-08-03 21:42:00 +0800", "snippet": "基础概念Channel 是 Golang 的核心类型，常用于多个 Goroutine 之间的通信。可以把 Channel 理解成是一个单向的管道，具有 FIFO 特性。Channel 是有容量限制的 当容量是 0 时，称为无缓冲 Channel。发送和接收只有一方就绪时，就绪方会被阻塞直到另一方也就绪。 当容量大于 0 时，称为有缓冲 Channel。当传输中的元素个数超过容量时，发送方将会被阻塞直到有可用的缓冲空间出现；当传输中的元素个数为 0 时，消费方将会被阻塞直到缓冲空间出现新的数据。数据结构type hchan struct {\tqcount uint // total data in the queue\tdataqsiz uint // size of the circular queue\tbuf unsafe.Pointer // points to an array of dataqsiz elements\telemsize uint16\tclosed uint32\telemtype *_type // element type\tsendx uint // send index\trecvx uint // receive index\trecvq waitq // list of recv waiters\tsendq waitq // list of send waiters\t// lock protects all fields in hchan, as well as several\t// fields in sudogs blocked on this channel.\t//\t// Do not change another G's status while holding this lock\t// (in particular, do not ready a G), as this can deadlock\t// with stack shrinking.\tlock mutex} qcount，缓冲队列的大小，记录实际元素数量 dataqsiz，缓冲队列的容量，记录最大可存储元素数量 buf，指向环形缓冲队列的指针 elemsize，每个元素的大小 closed，记录 channel 的关闭状态 elemtype，元素的类型 sendx，缓冲队列中即将发送的数据下标 recvx，缓冲队列中即将接收的数据下标 recvq，等待从 channel 接收数据的 goroutine 双向链表 sendq，等待向 channel 发送数据的 goroutine 双向链表 lock，多 goroutine 读写的并发保护锁图解发送数据注：无缓冲 Channel 原理类似不做赘述图解接收数据注：无缓冲 Channel 原理类似不做赘述源码解读在线源码发送数据func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool {\t...\tlock(&amp;c.lock)\tif c.closed != 0 {\t\tunlock(&amp;c.lock)\t\tpanic(plainError(\"send on closed channel\"))\t}\tif sg := c.recvq.dequeue(); sg != nil { // 关键点1\t\t// Found a waiting receiver. We pass the value we want to send\t\t// directly to the receiver, bypassing the channel buffer (if any).\t\tsend(c, sg, ep, func() { unlock(&amp;c.lock) }, 3)\t\treturn true\t}\tif c.qcount &lt; c.dataqsiz { // 关键点2\t\t// Space is available in the channel buffer. Enqueue the element to send.\t\tqp := chanbuf(c, c.sendx)\t\t...\t\ttypedmemmove(c.elemtype, qp, ep)\t\tc.sendx++\t\tif c.sendx == c.dataqsiz {\t\t\tc.sendx = 0\t\t}\t\tc.qcount++\t\tunlock(&amp;c.lock)\t\treturn true\t}\tif !block {\t\tunlock(&amp;c.lock)\t\treturn false\t}\t// 关键点3\t// Block on the channel. Some receiver will complete our operation for us.\tgp := getg()\tmysg := acquireSudog()\tmysg.releasetime = 0\tif t0 != 0 {\t\tmysg.releasetime = -1\t}\t// No stack splits between assigning elem and enqueuing mysg\t// on gp.waiting where copystack can find it.\tmysg.elem = ep\tmysg.waitlink = nil\tmysg.g = gp\tmysg.isSelect = false\tmysg.c = c\tgp.waiting = mysg\tgp.param = nil\tc.sendq.enqueue(mysg)\t// Signal to anyone trying to shrink our stack that we're about\t// to park on a channel. The window between when this G's status\t// changes and when we set gp.activeStackChans is not safe for\t// stack shrinking.\tatomic.Store8(&amp;gp.parkingOnChan, 1)\tgopark(chanparkcommit, unsafe.Pointer(&amp;c.lock), waitReasonChanSend, traceEvGoBlockSend, 2)\t// Ensure the value being sent is kept alive until the\t// receiver copies it out. The sudog has a pointer to the\t// stack object, but sudogs aren't considered as roots of the\t// stack tracer.\tKeepAlive(ep)\t...\treturn true}func send(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func(), skip int) {\t...\tif sg.elem != nil {\t\tsendDirect(c.elemtype, sg, ep)\t\tsg.elem = nil\t}\tgp := sg.g\tunlockf()\tgp.param = unsafe.Pointer(sg)\tsg.success = true\tif sg.releasetime != 0 {\t\tsg.releasetime = cputicks()\t}\tgoready(gp, skip+1)}关键点 当 recvq 有等待的接收者时，说明缓冲队列是空的，则将数据直接发送给接收者，然后将接收者的 Goroutine 标记成可运行的状态，并加入到本地可运行队列中。 当缓冲队列未满时，则将数据直接写入缓冲队列。 当缓冲队列满了或者无缓冲队列时，则将发送数据的指针和当前 Goroutine 等信息组装成 sudog 并加入到 sendq 中，等待合适机会执行。接收数据func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) {\t...\tlock(&amp;c.lock)\t...\tif sg := c.sendq.dequeue(); sg != nil { // 关键点1\t\t// Found a waiting sender. If buffer is size 0, receive value\t\t// directly from sender. Otherwise, receive from head of queue\t\t// and add sender's value to the tail of the queue (both map to\t\t// the same buffer slot because the queue is full).\t\trecv(c, sg, ep, func() { unlock(&amp;c.lock) }, 3)\t\treturn true, true\t}\tif c.qcount &gt; 0 { // 关键点2\t\t// Receive directly from queue\t\tqp := chanbuf(c, c.recvx)\t\t...\t\tif ep != nil {\t\t\ttypedmemmove(c.elemtype, ep, qp)\t\t}\t\ttypedmemclr(c.elemtype, qp)\t\tc.recvx++\t\tif c.recvx == c.dataqsiz {\t\t\tc.recvx = 0\t\t}\t\tc.qcount--\t\tunlock(&amp;c.lock)\t\treturn true, true\t}\tif !block {\t\tunlock(&amp;c.lock)\t\treturn false, false\t}\t// 关键点3\t// no sender available: block on this channel.\tgp := getg()\tmysg := acquireSudog()\tmysg.releasetime = 0\tif t0 != 0 {\t\tmysg.releasetime = -1\t}\t// No stack splits between assigning elem and enqueuing mysg\t// on gp.waiting where copystack can find it.\tmysg.elem = ep\tmysg.waitlink = nil\tgp.waiting = mysg\tmysg.g = gp\tmysg.isSelect = false\tmysg.c = c\tgp.param = nil\tc.recvq.enqueue(mysg)\t// Signal to anyone trying to shrink our stack that we're about\t// to park on a channel. The window between when this G's status\t// changes and when we set gp.activeStackChans is not safe for\t// stack shrinking.\tatomic.Store8(&amp;gp.parkingOnChan, 1)\tgopark(chanparkcommit, unsafe.Pointer(&amp;c.lock), waitReasonChanReceive, traceEvGoBlockRecv, 2)\t...\treturn true, success}func recv(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func(), skip int) {\tif c.dataqsiz == 0 {\t\t...\t\tif ep != nil {\t\t\t// copy data from sender\t\t\trecvDirect(c.elemtype, sg, ep)\t\t}\t} else {\t\t// Queue is full. Take the item at the\t\t// head of the queue. Make the sender enqueue\t\t// its item at the tail of the queue. Since the\t\t// queue is full, those are both the same slot.\t\tqp := chanbuf(c, c.recvx)\t\t...\t\t// copy data from queue to receiver\t\tif ep != nil {\t\t\ttypedmemmove(c.elemtype, ep, qp)\t\t}\t\t// copy data from sender to queue\t\ttypedmemmove(c.elemtype, qp, sg.elem)\t\tc.recvx++\t\tif c.recvx == c.dataqsiz {\t\t\tc.recvx = 0\t\t}\t\tc.sendx = c.recvx // c.sendx = (c.sendx+1) % c.dataqsiz\t}\tsg.elem = nil\tgp := sg.g\tunlockf()\tgp.param = unsafe.Pointer(sg)\tsg.success = true\tif sg.releasetime != 0 {\t\tsg.releasetime = cputicks()\t}\tgoready(gp, skip+1)}关键点 当 sendq 有等待的发送者时，如果是无缓冲队列，则直接从发送者获取数据；如果是缓冲队列满了，则从缓冲队列取出一个数据，然后将发送者的数据写入缓冲队列。最后将发送者的 Goroutine 标记成可运行的状态，并加入到本地可运行队列中。 当缓冲队列有数据时，则直接从缓冲队列读取数据。 当缓冲无数据时，则将接收数据的指针和当前 Goroutine 等信息组装成 sudog 并加入到 recvq 中，等待合适机会执行。" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
